generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customers {
  id        Int       @id @default(autoincrement())
  name      String
  cpf       String?   @db.VarChar(11)
  cnpj      String?   @db.VarChar(14)
  email     String    @unique
  phone     String?
  cellphone String?
  modified  DateTime? @default(now())
  created   DateTime  @default(now())
}

model customers_addresses {
  id           Int       @id @default(autoincrement())
  type         String
  name         String?
  recipient    String?
  customer_id  Int
  address      String
  number       String?
  complement   String?
  neighborhood String?
  city         String
  state        String
  zip_code     String
  country      String
  active       Boolean   @default(true)
  modified     DateTime? @default(now())
  created      DateTime  @default(now())

  @@index([customer_id], map: "customers_addresses_customer_id_fkey")
}

model orders {
  id                    Int       @id @default(autoincrement())
  tray_order_id         Int       @unique
  status                String
  subtotal              Decimal   @default(0.000000000000000000000000000000)
  taxes                 Decimal   @default(0.000000000000000000000000000000)
  discount              Decimal   @default(0.000000000000000000000000000000)
  discount_coupon       String?
  local_sale            String?
  chosen_shipping_type  String?
  chosen_shipping_value Decimal   @default(0.000000000000000000000000000000)
  shipping_cost         Int?
  dispatched_date       DateTime?
  delivered_date        DateTime?
  partner_id            Int
  paid                  Boolean   @default(false)
  created               DateTime  @default(now())
  modified              DateTime? @default(now())
  customerId            Int
  chosen_transporter_id Int
  transporter_id        Int?

  @@index([customerId], map: "orders_customerId_fkey")
  @@index([transporter_id], map: "orders_transporter_id_fkey")
}

model orders_invoices {
  id       Int       @id @default(autoincrement())
  order_id Int
  cnpj     String    @db.VarChar(14)
  number   Int
  key      Int
  link     String?
  modified DateTime? @default(now())
  created  DateTime  @default(now())

  @@index([order_id], map: "orders_invoices_order_id_fkey")
}

model orders_marketplaces {
  id                   Int       @id @default(autoincrement())
  name                 String
  order_id             Int       @unique
  marketplace_order_id Int       @unique
  link                 String?
  modified             DateTime? @default(now())
  date                 DateTime  @default(now())
}

model orders_notes {
  id          Int       @id @default(autoincrement())
  order_id    Int
  description String
  by          String
  modified    DateTime? @default(now())
  created     DateTime  @default(now())

  @@index([order_id], map: "orders_notes_order_id_fkey")
}

model orders_payments {
  id       Int       @id @default(autoincrement())
  method   String
  value    Decimal   @default(0.000000000000000000000000000000)
  date     DateTime  @default(now())
  created  DateTime  @default(now())
  modified DateTime? @default(now())
  order_id Int

  @@index([order_id], map: "orders_payments_order_id_fkey")
}

model orders_products_sold {
  id         Int       @id @default(autoincrement())
  order_id   Int
  tray_id    Int?
  product_id Int
  kit_id     Int?
  reference  String
  name       String
  cost       Decimal?
  price      Decimal
  paid_price Decimal
  modified   DateTime? @default(now())
  created    DateTime  @default(now())

  @@index([order_id], map: "orders_products_sold_order_id_fkey")
}

model Store {
  id                     Int       @id @default(autoincrement())
  trayId                 Int       @unique @map("tray_id")
  name                   String
  link                   String
  apiAddress             String    @map("api_address")
  oAuth2Code             String    @map("oauth2_code")
  accessToken            String?   @map("access_token")
  refreshToken           String?   @map("refresh_token")
  expirationAccessToken  DateTime? @map("expiration_access_token")
  expirationRefreshToken DateTime? @map("expiration_refresh_token")
  tokenActivated         DateTime? @map("token_activated")
  modified               DateTime? @default(now())

  @@map("stores")
}

model transporters {
  id            Int     @id @default(autoincrement())
  external_id   Int     @unique
  name          String
  ssw           Boolean
  tracking_link String?
}
